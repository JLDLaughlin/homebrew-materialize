#!/usr/bin/env bash

set -euo pipefail
shopt -s dotglob nullglob

if [[ $# -ne 1 ]]; then
  echo "usage: $0 VERSION

VERSION does not include the leading 'v'

Setting the env var NO_UPLOAD will prevent uploading to bintray" >&2
  exit 1
fi

main() {
    version=$1
    BOTTLE="$(pwd)/materialized-$version.high_sierra.bottle.tar.gz"

    # download for CI or humans
    download_bottle

    if [[ ! "${GITHUB_WORKFLOW:-}" ]]; then
        print_metadata
        read -r -p "Update the formula and press enter when ready "
        if [[  ! "${NO_UPLOAD:-}" ]]; then
            upload_bottle
        fi
        print_bottle_sha
    fi
}

download_bottle() {
    prefix=materialized/$version

    tmpdir=$(mktemp -d)
    cd "$tmpdir"
    trap "rm -rf $tmpdir" EXIT

    # Homebrew wants to manage the bottle-building process via `brew install
    # --build-bottle` and `brew bottle`, but these commands are tightly coupled to
    # the particulars of Homebrew's pull request and CI flow. See [0] for the gory
    # details. Our macOS release tarballs are basically bottles already, so instead
    # we've reverse engineered what needs to go into a Homebrew bottle and build the
    # bottle by hand. This saves considerable time in CI (25m+), because building
    # release binaries on GitHub's macOS infrastructure is unbearably slow.
    #
    # [0]: https://jonathanchang.org/blog/maintain-your-own-homebrew-repository-with-binary-bottles/
    runv curl -L https://downloads.mtrlz.dev/materialized-v$version-x86_64-apple-darwin.tar.gz | tar xz
    mv materialized materialized.orig
    mkdir -p "$prefix/.brew"
    mv materialized.orig/* "$prefix"
    cat > "$prefix/INSTALL_RECEIPT.json" <<EOF
{
  "homebrew_version": null,
  "used_options": [],
  "unused_options": [],
  "built_as_bottle": true,
  "poured_from_bottle": false,
  "installed_as_dependency": false,
  "installed_on_request": true,
  "changed_files": [
    "INSTALL_RECEIPT.json"
  ],
  "time": null,
  "source_modified_time": null,
  "HEAD": null,
  "stdlib": null,
  "compiler": "clang",
  "aliases": [],
  "runtime_dependencies": [],
  "source": {
    "path": "@@HOMEBREW_REPOSITORY@@/Library/Taps/MaterializeInc/homebrew-materialize/Formula/materialized.rb",
    "tap": "materializeinc/materialize",
    "spec": "stable",
    "versions": {
      "stable": "$version",
      "devel": "",
      "head": "HEAD",
      "version_scheme": 0
    }
  }
}
EOF
    # Remove the self-referential bottle block using the same technique as
    # Hombrew.
    # See: https://github.com/Homebrew/brew/blob/d0f40eda1/Library/Homebrew/formula_installer.rb#L332
    sed "/^  bottle do/,/^  end/d" "$OLDPWD/Formula/materialized.rb" > "$prefix/.brew/materialized.rb"

    # Make the tarballs reproducible (given an official Materialize release tarball)
    # so that CI can check that the bottle it downloads is, in fact, the output of
    # this script at the tested revision.
    if tar --version | grep -q "GNU tar"; then
        TAR_CMD=tar
    else
        TAR_CMD=gtar
    fi
    "$TAR_CMD" \
        --sort=name \
        --mtime="./$prefix/bin/materialized" \
        --owner=0 --group=0 --numeric-owner \
        --pax-option=exthdr.name=%d/PaxHeaders/%f,delete=atime,delete=ctime \
        -c materialized \
        | gzip -n > "$BOTTLE"

}

upload_bottle() {
  if [[ ! -f "$HOME/.netrc" ]] || ! grep machine.api.bintray.com "$HOME/.netrc" >/dev/null 2>&1; then
      echo
      echo "WARNING: $HOME/.netrc is misconfigured, please check the bintray instructions in CONTRIBUTING.md" >&2
      echo
  fi
  runv curl -n -f -X POST -H "Content-Type: application/json" -d "
    {
        \"name\": \"$version\",
        \"vcs_tag\": \"v$version\",
    }" \
    https://api.bintray.com/packages/materialize/homebrew/materialized/versions
  echo
  echo "Created Bintray version"
  runv curl -n -f -T "$BOTTLE" "https://api.bintray.com/content/materialize/homebrew/materialized/$version/materialized-$version.high_sierra.bottle.tar.gz;publish=1"
  echo
  echo "Uploaded and published bottle to Bintray"
}

print_metadata() {
  echo
  echo "Make sure these values are correct in Formula/materialized.rb:"
  echo

  archive_url="https://github.com/MaterializeInc/materialize/archive/v${version}.tar.gz"
  curl -fsSL "https://github.com/MaterializeInc/materialize/archive/v${version}.tar.gz" -o materialize.tar.gz
  mainsha=$(shasum -a 256 materialize.tar.gz | awk '{print $1}')

  tag_object=$(curl -fsSL "https://api.github.com/repos/MaterializeInc/materialize/git/refs/tags/v$version" \
            | jq -r ".object.sha")
  tag_sha=$(curl -fsSL "https://api.github.com/repos/MaterializeInc/materialize/git/tags/$tag_object" \
         | jq .object.sha)

  echo "url                '$archive_url'"
  echo "sha256             '${mainsha}'"
  echo "STABLE_BUILD_SHA = ${tag_sha}.freeze"
}

print_bottle_sha() {
  hibottlesha=$(shasum -a 256 "$BOTTLE" | awk '{ print $1 }')
  echo "now put this in the Formula/materialized.rb"
  echo
  echo "sha256             '${hibottlesha}' => :high_sierra"
}

runv() {
    printf '==> ' >&2
    printf "%q " "$@" >&2
    printf "\n" >&2
    "$@"
}

main "$@"
